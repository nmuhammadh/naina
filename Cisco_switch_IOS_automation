
import subprocess, re, time, netmiko
from netmiko import ConnectHandler
from netmiko import SCPConn
from datetime import datetime
from netmiko import NetMikoAuthenticationException, NetMikoTimeoutException
import paramiko
import getpass,sys,time
import socket
from socket import gethostbyname, gaierror

device = {
'device_type': 'cisco_ios',
'ip': '10.176.4.36',
'username': '90024208',
'password': 'Sep@2020',
}

ipfile=open('C:\\Users\\90024208\\AppData\\Local\\Programs\\Python\\Python311\\iplist.txt')

#Creating the CSV files for pre and post upgrade#
#clearing the old data from the CSV file and writing the headers

f = open("C:\\Users\\90024208\\AppData\\Local\\Programs\\Python\\Python311\\pre_upgrade.csv", "w+")
f.write("IP Address, Hostname, Uptime, Current_Version, Current_Image, Serial_Number, Device_Model, Device_Memory")
f.write("\n")
f.close()
#clearing the old data from the CSV file and writing the headers
f = open("C:\\Users\\90024208\\AppData\\Local\\Programs\\Python\\Python311\\post_upgrade.csv", "w+")
f.write("IP Address, Hostname, Uptime, Current_Version, Current_Image, Serial_Number, Device_Model, Device_Memory")
f.write("\n")
f.close()

#list where informations will be stored
pre_upgrade_devices = []

for line in ipfile:
    device['ip']=line.strip("\n")
    print("\n Connecting Device \n ",line)
    net_connect = ConnectHandler(**device)
    
    try:
        net_connect = ConnectHandler(**device)
    
    except NetMikoAuthenticationException:
        print ('Authentication issue: ' + line)
        continue
    except socket.timeout:
        print ('socket Timeout to device: ' + line)
        pass
    except socket.gaierror:
        print ('socket error:' + line)
        continue
    except NetMikoTimeoutException:
        print ('Timeout issue in:' + line)
        continue
    except paramiko.AuthenticationException:
        print ('Authentication issue: ' + line)
        continue
    except Exception as e:
        print('not connected')
        continue
    
    sh_ver_output = net_connect.send_command('show version')   
        #finding hostname in output using regular expressions
    regex_hostname = re.compile(r'(\S+)\suptime')
    hostname = regex_hostname.findall(sh_ver_output)
    print(hostname)
        #finding uptime in output using regular expressions
    regex_uptime = re.compile(r'\S+\suptime\sis\s(.+)')
    uptime = regex_uptime.findall(sh_ver_output)
    uptime = str(uptime).replace(',' ,'').replace("'" ,"")
    uptime = str(uptime)[1:-1]
    print(uptime)
        #finding version in output using regular expressions
    regex_version = re.compile(r'Cisco\sIOS\sSoftware.+Version\s([^,]+)')
    version = regex_version.findall(sh_ver_output)
    print(version)
        #finding serial in output using regular expressions
    regex_serial = re.compile(r'Processor\sboard\sID\s(\S+)')
    serial = regex_serial.findall(sh_ver_output)
    print(serial)
        #finding ios image in output using regular expressions
    regex_ios = re.compile(r'System\simage\sfile\sis\s"([^ "]+)')
    ios = regex_ios.findall(sh_ver_output)
    print(ios)
        #finding model in output using regular expressions
    regex_model = re.compile(r'[Cc]isco\s(\S+).*memory.')
    model = regex_model.findall(sh_ver_output)
    print(model)
        #finding the router's memory using regular expressions
    try:
        regex_memory = re.search(r'with (.*?) bytes of memory', sh_ver_output).group(1)
        memory = regex_memory
    except AttributeError:
        regex_memory = re.search(r'with (.*?) bytes of physical memory', sh_ver_output)
        continue  
    print(memory)
       
    #append results to table [hostname,uptime,version,serial,ios,model]
    pre_upgrade_devices.append([line, hostname[0],uptime,version[0],ios[0], serial[0],model[0],memory])
    #print all results (for all routers) on screen    
    for i in pre_upgrade_devices:
        i = ", ".join(i)      
        f = open("C:\\Users\\90024208\\AppData\\Local\\Programs\\Python\\Python311\\pre_upgrade.csv", "a")
        f.write(i)
        f.write("\n")
        f.close()
    
